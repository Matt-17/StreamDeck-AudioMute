name: Continuous Integration
on: [push, pull_request]
jobs:
  build:
    name: Build ${{matrix.os}}/${{matrix.build-type}}
    runs-on: ${{matrix.os}}-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: source
      - name: Make build directory
        run: cmake -E make_directory build
      - name: Fetch code-signing key
        if: matrix.os == 'windows'
        env:
          CODE_SIGNING_PFX_BASE64: ${{ secrets.CODE_SIGNING_PFX_BASE64 }}
        run: '[System.Convert]::FromBase64String($Env:CODE_SIGNING_PFX_BASE64) | Set-Content ${{runner.temp}}/MyCert.pfx -AsByteStream'
      - name: Configure
        working-directory: build
        shell: pwsh
        run: |
          cmake ${{github.workspace}}\source `
            "-DSIGNTOOL_KEY_ARGS=/f;${{runner.temp}}/MyCert.pfx" `
            -DCMAKE_BUILD_TYPE=${{matrix.build-type}} `
            "-DCMAKE_INSTALL_PREFIX=${{github.workspace}}/com.fredemmott.micmutetoggle.sdPlugin"
      - name: Compile
        working-directory: build
        run: cmake --build . --config ${{matrix.build-type}} --parallel
      - name: Install
        working-directory: build
        run: cmake --install . --config ${{matrix.build-type}}
      - name: Upload MacOS Executable
        if: matrix.os == 'macos'
        uses: actions/upload-artifact@v2
        with:
          name: sdmicmute-Mac-${{matrix.build-type}}
          path: build/Sources/sdmicmute
      - name: Upload Windows Executable
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: sdmicmute-Windows-${{matrix.build-type}}
          path: build/Sources/${{matrix.build-type}}/sdmicmute.exe
    strategy:
      matrix:
        os: [windows, macos]
        build-type: [Release, Debug]
  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: ${{runner.temp}}/artifacts
    - name: Display downloaded files
      run: ls -R
      working-directory: ${{runner.temp}}/artifacts
    - name: Check if this is a release push
      id: ref
      run: |
        if echo ${{github.ref}} | grep --silent refs/tags/v; then
          echo "::set-output name=is-release::true"
          echo "::set-output name=tag::$(echo ${{github.ref}} | awk -F/ '{print $NF}')"
        else
          echo "::set-output name=is-release::false"
        fi
    - name: Create Draft Release
      id: create-release
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_name: Release ${{ steps.ref.outputs.tag }}
        tag_name: ${{steps.ref.outputs.tag}}
        draft: true
    - name: Attach Release Build
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/artifacts/Release/com.fredemmott.micmutetoggle.streamDeckPlugin
        asset_name: com.fredemmott.micmutetoggle.streamDeckPlugin
        asset_content_type: application/octet-stream
    - name: Attach Debug Build
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/artifacts/Debug/com.fredemmott.micmutetoggle.streamDeckPlugin
        asset_name: debug-com.fredemmott.micmutetoggle.streamDeckPlugin
        asset_content_type: application/octet-stream
